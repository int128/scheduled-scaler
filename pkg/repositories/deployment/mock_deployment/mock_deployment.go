// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/int128/scheduled-scaler/pkg/repositories/deployment (interfaces: Interface)

// Package mock_deployment is a generated GoMock package.
package mock_deployment

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// FindBySelectors mocks base method
func (m *MockInterface) FindBySelectors(arg0 context.Context, arg1 map[string]string) (*v1.DeploymentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySelectors", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeploymentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySelectors indicates an expected call of FindBySelectors
func (mr *MockInterfaceMockRecorder) FindBySelectors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySelectors", reflect.TypeOf((*MockInterface)(nil).FindBySelectors), arg0, arg1)
}

// Scale mocks base method
func (m *MockInterface) Scale(arg0 context.Context, arg1 *v1.Deployment, arg2 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scale", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scale indicates an expected call of Scale
func (mr *MockInterfaceMockRecorder) Scale(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockInterface)(nil).Scale), arg0, arg1, arg2)
}
